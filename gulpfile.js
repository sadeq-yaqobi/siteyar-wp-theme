const gulp = require('gulp');
const cssnano = require('gulp-cssnano');
const uglify = require('gulp-uglify');
const rename = require('gulp-rename');
const gulpIf = require('gulp-if');
const purgecss = require('gulp-purgecss');
const through2 = require('through2');
const {phpMinify} = require('@cedx/php-minifier');
// const htmlmin = require('gulp-htmlmin');
const htmlmin = require('gulp-html-minifier-terser');

//<---------------CSS & JS Minifying with PurgeCSS------------------>
// Purge unused CSS and log removed classes
gulp.task('purge-css', function() {
    return gulp.src('assets/css/main-style.css')
        .pipe(purgecss({
            content: ['**/*.html', '**/*.php', '**/*.js'], // Add paths to all files that contain your HTML, PHP, JS content
            safelist: {
                standard: ['menu-item', 'dropdown-toggle'], // List classes or patterns that should not be removed
                deep: [/^menu-item/, /^dropdown-toggle/] // Use regex for more complex patterns
            }
        }))
        .pipe(rename({ suffix: '.purged' })) // Optional: Rename the purged files
        .pipe(gulp.dest('assets/css'));
});

//<---------------CSS & JS Minifying------------------>

// Helper function to check if a file is already minified
function isMinified(file) {
    return file.path.includes('.min.');
}

// Minify CSS
gulp.task('minify-css', function() {
    return gulp.src('assets/css/main-style.css')
        .pipe(gulpIf(file => !isMinified(file), cssnano()))
        .pipe(gulpIf(file => !isMinified(file), rename({ suffix: '.min' })))
        .pipe(gulp.dest('assets/css'));
});

// Minify JS
gulp.task('minify-js', function() {
    return gulp.src('assets/js/*.js')
        .pipe(gulpIf(file => !isMinified(file), uglify()))
        .pipe(gulpIf(file => !isMinified(file), rename({ suffix: '.min' })))
        .pipe(gulp.dest('assets/js'));
});


//<---------------PHP Minifying------------------>

// Gulp task to minify PHP files
gulp.task('minify-php', () => {
    return gulp.src('**/*.php') // Adjust the glob pattern as needed
        .pipe(phpMinify())
        .pipe(gulp.dest('./')); // Outputs the minified PHP files to the same directory
});
//<---------------HTML Minifying------------------>
/*const options = {
    includeAutoGeneratedTags: true,
    removeComments: true,
    removeCommentsFromCDATA: true,
    removeEmptyAttributes: true,
    collapseWhitespace: true,
    ignoreCustomFragments: [/<\?php[\s\S]*?\?>/g] // Ignore PHP code blocks
};*/
gulp.task('minify-html', () => {
    return gulp.src(
        // '*.php',
        // 'partials/**/*.php',
        // 'meta-data/**/*.php',
        'loop/**/*.php',
    )
        .pipe(htmlmin({
            collapseWhitespace: true,
            removeComments: true,
            // minifyCSS: true,
            // minifyJS: true,
            ignoreCustomFragments: [
                /<\?php[\s\S]*?\?>/g,      // Matches PHP blocks with <?php ... ?>
                /<\?php[\s\S]*/g           // Matches unclosed PHP blocks with <?php ...
            ]
        }))
        .pipe(gulp.dest('./dest/loop')); // Overwrites the original files
});



// Default task to run when you run 'gulp'
gulp.task('default', gulp.series('minify-css', 'minify-js'));
